// Code generated by MockGen. DO NOT EDIT.
// Source: entity/processor/processor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	processor "image-processor/entity/processor"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIMemory is a mock of IMemory interface.
type MockIMemory struct {
	ctrl     *gomock.Controller
	recorder *MockIMemoryMockRecorder
}

// MockIMemoryMockRecorder is the mock recorder for MockIMemory.
type MockIMemoryMockRecorder struct {
	mock *MockIMemory
}

// NewMockIMemory creates a new mock instance.
func NewMockIMemory(ctrl *gomock.Controller) *MockIMemory {
	mock := &MockIMemory{ctrl: ctrl}
	mock.recorder = &MockIMemoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMemory) EXPECT() *MockIMemoryMockRecorder {
	return m.recorder
}

// Compress mocks base method.
func (m *MockIMemory) Compress(arg0 context.Context, arg1 *multipart.FileHeader, arg2 *processor.CompressOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compress", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compress indicates an expected call of Compress.
func (mr *MockIMemoryMockRecorder) Compress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compress", reflect.TypeOf((*MockIMemory)(nil).Compress), arg0, arg1, arg2)
}

// Convert mocks base method.
func (m *MockIMemory) Convert(arg0 context.Context, arg1 *multipart.FileHeader, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Convert indicates an expected call of Convert.
func (mr *MockIMemoryMockRecorder) Convert(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockIMemory)(nil).Convert), arg0, arg1, arg2)
}

// Resize mocks base method.
func (m *MockIMemory) Resize(arg0 context.Context, arg1 *multipart.FileHeader, arg2 *processor.ResizeOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resize", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resize indicates an expected call of Resize.
func (mr *MockIMemoryMockRecorder) Resize(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockIMemory)(nil).Resize), arg0, arg1, arg2)
}
